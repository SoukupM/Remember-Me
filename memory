import random, pygame, sys
from pygame.locals import*

WINDOWWIDTH = 500
WINDOWHEIGHT = 500
REVEALSPEED = 8
BOXSIZE = 50
GAPSIZE = 10 
BOARDWIDTH = 8
BOARDHEIGHT = 8
MARGIN = int((WINDOWWIDTH - (BOARDWIDTH*(CARDSIZE + GAPSIZE)))/2)

#setting up colors
BLUE = (0,0,255) 
RED = (255,0,0)
YELLOW = (255,255,0)
BLACK = (0,0,0)
GREEN = (0,128,0)
PURPLE = (128,0,128)
GRAY = (128,128,128)
TEAL = (0,128,128)
BGCOLOR = (60,60,100)
COLORS = (BLUE, RED, YELLOW, BLACK, GREEN, PURPLE, GRAY, TEAL)

pygame.init() #initialize pygame and game board
pygame.display.set_caption('Memory Game')
FPS = 30
FPSCLOCK = pygame.time.Clock()
DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))

def main():
	mousex = 0
	mousey = 0
	mainBoard = getRandomizedBoard()
	revealedBoxes = generateRevealedBoxesData(False)
	firstSelection = None 
	DISPLAYSURF.fill(BGCOLOR)
	startGameAnimation(mainBoard)
	while True: #main game loop
		mouseClicked = False
		DISPLAYSURF.fill(BGCOLOR)
		drawBoard(mainBoard, revealedBoxes)
		for event in pygame.event.get(): 
			if event.type==QUIT: #quits game if quit event type
				pygame.quit()
				sys.exit()
			elif event.type==MOUSEMOTION:
				mousex,mousey = event.pos
			elif event.type==MOUSEBUTTONUP:
				mousex, mousey = event.pos
				mouseClicked = True
			
			boxx, boxy = getBoxAtPixel(mousex,mousey)
			if boxx != None and boxy != None:
				if not revealedBoxes[boxx][boxy]:
					drawHighlightBox(boxx,boxy)
				if not revealedBoxes[boxx][boxy] and mouseClicked:
					revealBoxesAnimation(mainBoard,[(boxx,boxy)])
					revealedBoxes[boxx][boxy] = True
					if firstSelection == None:
						firstSelection = (boxx,boxy)
					else: 
						icon1color = getColor(mainBoard,firstSelection[0],firstSelection[1])
						icon2color = getColor(mainBoard,boxx,boxy)
					
					if icon1color != icon2color:
						pygame.time.wait(1000)
						coverBoxesAnimation(mainBoard,[(firstSelection[0],firstSelection[1]),(boxx,boxy)])
						revealedBoxes[firstSelection[0]][firstSelection[1]] = False
						revealedBoxes[boxx][boxy] = False
					elif hasWon(revealedBoxes):
						gameWonAmination(mainBoard)
						pygame.time.wait(2000)
						
						mainBoard = getRandomizedBoard()
						revealedBoxes = generateRevealedBoxesData(False)
						
						drawBoard(mainBoard, revealedBoxes)
						pygame.display.update()
						pygame.time.wait(1000)
						
						startGameAnimation(mainBoard)
					firstSelection = None
		
		pygame.display.update() #writes gamestate to board 
		FPSCLOCK.tick(FPS)
	
def getRandomizedBoard():
	icons = []
	for color in COLORS:
		icons.append(color)
	
	random.shuffle(icons)
	numIconsUsed=int(BOARDWIDTH*BOARDHEIGHT/2)
	icons = icons[:NumIconsUsed]
	random.shuffle(icons)
	
	board =[]
	for x in range(BOARDWIDTH)
		column = []
		for y in range(BOARDHEIGHT):
			column.append(icons[0])
			del icons[0]
		board.append(column)
	return board

def splitIntoGroupsOf(groupSize, theList):
	result = []
	for i in range(0,len(theList),groupSize):
		result.append(theList[i:i+groupSize])
	return result

def leftTopCoordsOfBox(boxx, boxy):
	left = boxx*(BOXSIZE + GAPSIZE) + MARGIN
	top = boxy*(BOXSIZE + GAPSIZE) + MARGIN
	return (left, top)
	
def getBoxAtPixel(x,y):
	for boxx in range(BOARDWIDTH):
		for boxy in range(BOARDHEIGHT):
			left, top = leftTopCoordsOfBox(boxx, boxy)
			boxRect = pygame.Rect(left, top, BOXSIZE, BOXSIZE)
			if boxRect.collidepoint(x, y):
				return (boxx, boxy)
	return (None, None)

def getColor(board, boxx, boxy):
	return board[boxx][boxy][0]

def drawBoxCovers(board, boxes, coverage):
	for box in boxes:
	left, top = leftTopCoordsOfBox(box[0],box[1])
	pygame.draw.rect(DISPLAYSURF, BGCOLOR, (left, top, BOXSIZE, BOXSIZE))
	color = getColor(board, box[0], box[1])
	if coverage > 0:
		pygame,draw,rect(DISPLAYSURF, BOXCOLOR, (left, top, coverage, BOXSIZE))
	pygame.display.update()
	FPSCLOCK.tick(FPS)

def revealBoxesAnimation(board, boxesToReveal):
	for coverage in range(BOXSIZE, (-REVEALSPEED) -1, -REVEALSPEED):
		drawBoxCovers(board, boxesToReveal, coverage)

def coverBoxesAnimation(board, boxesToCover):
	for coverage in range(0,BOXSIZE + REVEALSPEED, REVEALSPEED):
		drawBoxCovers(board, boxesToCover, coverage)

def drawBoard(board, revealed):
	for boxx in range(BOARDWIDTH):
		for boxy in range(BOARDHEIGHT):
			left, top = leftTopCoordsOfBox(boxx, boxy)
			if not revealed[boxx][boxy]:
				pygame.draw.rect(DISPLAYSURF, BOXCOLOR,(left, top, BOXSIZE, BOXSIZE))
			else:
				color = getColor (board,boxx, boxy)
				
def drawHighlightBox(boxx, boxy):
	left, top = leftTopCoordsOfBox(boxx, boxy)
	pygame.draw.rect(DISPLAYSURF, HIGHLIGHTCOLOR, (left -5, top-5, BOXSIZE+10, BOXSIZE+10),4)

def startGameAnimation(board):
	coveredBoxes = generateRevealedBoxesData(False)
	boxes = []
	for x in range(BOARDWIDTH):
		for y in range(BOARDHEIGHT):
			boxes.append((x, y))
	random.shuffle(boxes)
	boxGroups = splitIntoGroupsOf(8,boxes)
	
	drawBoard(board, coveredBoxes)
	for boxGroup in boxGroups:
		revealBoxesAnimation(board, boxGroup)
		coverBoxesAnimation(board, boxGroup)

def gameWonAnimation(board)L
	coveredBoxes = generateRevealedBoxesData(True)
	color1 = GRAY
	color2 = BGCOLOR

	for i in range(13):
		color1, color2 = color2, color1
		DISPLAYSURF.fill(color1)
		drawBoard(board, coveredBoxes)
		pygame.display.update()
		pygame.time.wait(300)

def hasWon(revealedBoxes):
	for i in revealedBoxes):
		if False in i:
			return False
	return True
	
main()
